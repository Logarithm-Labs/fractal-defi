from typing import List
from dataclasses import dataclass
import logging
import os
from datetime import datetime

from fractal.core.base import (
    BaseStrategy, Action, BaseStrategyParams,
    ActionToTake, NamedEntity, Observation)
from fractal.core.entities import BaseSpotEntity
from fractal.loaders import BinanceDayPriceLoader, LoaderType

from binance_entity import BinanceSpot, BinanceGlobalState

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
log_filename = os.path.join(log_dir, f"strategy_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.FileHandler(log_filename, mode='w', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
logger.info(f"–õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {log_filename}")


@dataclass
class HolderStrategyParams(BaseStrategyParams):
    BUY_PRICE: float
    SELL_PRICE: float
    TRADE_SHARE: float = 0.01
    INITIAL_BALANCE: float = 10_000
    MA_PERIOD: int = 20


class HodlerStrategy(BaseStrategy):

    def __init__(self, debug: bool = False, params: HolderStrategyParams | None = None):
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HodlerStrategy —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: debug={debug}, params={params}")
        super().__init__(params=params, debug=debug)

    def set_up(self):
        logger.info("–ó–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ set_up")
        # check that the entity 'exchange' is registered
        entities = self.get_all_available_entities()
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: {entities}")
        assert 'exchange' in entities
        # deposit initial balance into the exchange
        if self._params is not None:
            logger.info(f"–í–Ω–µ—Å–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {self._params.INITIAL_BALANCE}")
            self.__deposit_into_exchange()

    def predict(self) -> ActionToTake:
        exchange: BaseSpotEntity = self.get_entity('exchange')
        current_price = exchange.global_state.price
        current_cash = exchange.internal_state.cash
        current_amount = exchange.internal_state.amount
        current_sma = exchange.calculate_sma(self._params.MA_PERIOD)

        logger.info(f"predict: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ = {current_price}, –Ω–∞–ª–∏—á–Ω—ã–µ = {current_cash}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC = {current_amount}, SMA = {current_sma}")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: BUY_PRICE = {self._params.BUY_PRICE}, SELL_PRICE = {self._params.SELL_PRICE}, TRADE_SHARE = {self._params.TRADE_SHARE}")
        
        
        if current_price < self._params.BUY_PRICE and current_sma < self._params.BUY_PRICE:
            # Emit a buy action to apply to the entity registered as 'exchange'
            # We buy a fraction of the total cash available
            amount_to_buy = self._params.TRADE_SHARE * current_cash / current_price
            logger.info(f"üí∞ –¶–µ–Ω–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –ø–æ–∫—É–ø–∫–∏. –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {amount_to_buy}")
            if amount_to_buy < 1e-6:
                logger.info("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return []
            logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∞: {amount_to_buy} BTC –ø–æ —Ü–µ–Ω–µ {current_price}")
            return [ActionToTake(
                entity_name='exchange',
                action=Action(action='buy', args={'amount': amount_to_buy})
            )]
        elif current_price > self._params.SELL_PRICE:
            # Emit a sell action to apply to the entity registered as 'exchange'
            # We sell a fraction of the total BTC available
            amount_to_sell = self._params.TRADE_SHARE * current_amount
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ–¥–∞–∂–∞ –≤ –ø–ª—é—Å –∏–ª–∏ –º–∏–Ω—É—Å (–¥–ª—è —ç–º–æ–¥–∑–∏)
            # –¢–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏, –±—É–¥–µ–º —É—Å–ª–æ–≤–Ω–æ —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É –≤—ã–≥–æ–¥–Ω–æ–π,
            # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –º–µ–∂–¥—É BUY_PRICE –∏ SELL_PRICE
            avg_price = (self._params.BUY_PRICE + self._params.SELL_PRICE) / 2
            emoji = "üöÄ" if current_price > avg_price else "üìâ"
            
            logger.info(f"{emoji} –¶–µ–Ω–∞ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ–¥–∞–∂–∏. –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {amount_to_sell}")
            if amount_to_sell < 1e-6:
                logger.info("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return []
            logger.info(f"üí∏ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞: {amount_to_sell} BTC –ø–æ —Ü–µ–Ω–µ {current_price}")
            return [ActionToTake(
                entity_name='exchange',
                action=Action(action='sell', args={'amount': amount_to_sell})
            )]
        else:
            logger.info("üîÑ –¶–µ–Ω–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ. –°—Ç—Ä–∞—Ç–µ–≥–∏—è HODL - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
            # HODL
            return []

    def __deposit_into_exchange(self):
        exchange: BaseSpotEntity = self.get_entity('exchange')
        action: Action = Action(action='deposit', args={'amount_in_notional': self._params.INITIAL_BALANCE})
        logger.info(f"üíº –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–ø–æ–∑–∏—Ç: {self._params.INITIAL_BALANCE}")
        exchange.execute(action)
        logger.info(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: cash={exchange.internal_state.cash}, amount={exchange.internal_state.amount}")


class BinanceHodlerStrategy(HodlerStrategy):
    def set_up(self):
        logger.info("–ó–∞–ø—É—Å–∫ set_up –≤ BinanceHodlerStrategy")
        self.register_entity(NamedEntity(entity_name='exchange', entity=BinanceSpot()))
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å 'exchange'")
        super().set_up()


if __name__ == '__main__':
    logger.info("üöÄ ------ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ------")
    # Load prices from Binance
    logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –∏–∑ Binance")
    binance_prices = BinanceDayPriceLoader('BTCUSDT', loader_type=LoaderType.CSV).read(with_run=True)
    logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(binance_prices)} –∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–Ω")

    # Build observations list
    logger.info("üîç –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")

    # —Ç—É—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ observation 
    observations: List[Observation] = [
        Observation(timestamp=timestamp, states={'exchange': BinanceGlobalState(price=price)})
        for timestamp, price in zip(binance_prices.index, binance_prices['price'])
    ]
    logger.info(f"üëÅÔ∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(observations)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")

    # Run the strategy
    params: HolderStrategyParams = HolderStrategyParams(
        BUY_PRICE=50_000, SELL_PRICE=60_000,
        TRADE_SHARE=0.01, INITIAL_BALANCE=100_000,
        MA_PERIOD=20
    )
    logger.info(f"‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
    strategy = BinanceHodlerStrategy(debug=True, params=params)
    
    logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    result = strategy.run(observations)
    
    logger.info("üèÅ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫:")
    metrics = result.get_default_metrics()
    logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: {metrics}")
    
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Ñ–∞–π–ª")
    result.to_dataframe().to_csv('resutl.csv')  # save results of strategy states
    logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª resutl.csv")
